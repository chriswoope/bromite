From: uazo <uazo@users.noreply.github.com>
Date: Sat, 13 Nov 2021 09:17:06 +0000
Subject: Disable FLoC and privacy sandbox

Remove UI from the settings and set the flags to inactive
Permanently removes FLoC support, disabling the download of LSH clusters,
the marking the history navigation and the javascript API and permission policies.
Also added the disabling of blink features through the DisabledForBromite tag
---
 .../java/res/xml/privacy_preferences.xml      |  4 ----
 .../privacy/settings/PrivacySettings.java     | 18 -----------------
 .../browser/chrome_content_browser_client.cc  |  4 ++++
 .../privacy_sandbox/generated_floc_pref.cc    |  2 +-
 .../history/core/browser/history_backend.cc   | 13 +-----------
 .../history/core/browser/history_service.cc   | 13 ++++--------
 components/history/core/browser/url_row.h     |  1 -
 .../privacy_sandbox/privacy_sandbox_prefs.cc  |  4 ++--
 .../privacy_sandbox_settings.cc               | 20 ++++++++++---------
 .../interest_group/ad_auction_service_impl.cc | 11 +++-------
 third_party/blink/common/features.cc          |  6 +++---
 .../permissions_policy_feature.mojom          |  9 ---------
 .../blink/renderer/core/dom/document.cc       |  1 -
 .../permissions_policy_features.json5         |  9 ---------
 .../modules/ad_auction/navigator_auction.cc   | 11 +++-------
 .../platform/runtime_enabled_features.json5   |  3 +--
 16 files changed, 33 insertions(+), 96 deletions(-)

diff --git a/chrome/android/java/res/xml/privacy_preferences.xml b/chrome/android/java/res/xml/privacy_preferences.xml
--- a/chrome/android/java/res/xml/privacy_preferences.xml
+++ b/chrome/android/java/res/xml/privacy_preferences.xml
@@ -70,10 +70,6 @@
         android:title="@string/open_external_links_incognito_title"
         android:summary="@string/open_external_links_incognito_summary"
         android:defaultValue="false" />
-    <Preference
-        android:key="privacy_sandbox"
-        android:title="@string/prefs_privacy_sandbox"
-        android:fragment="org.chromium.chrome.browser.privacy_sandbox.PrivacySandboxSettingsFragment"/>
     <PreferenceCategory
         android:key="services_category"
         android:title="@string/services_category_title">
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java b/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
@@ -28,8 +28,6 @@ import org.chromium.chrome.browser.preferences.Pref;
 import org.chromium.chrome.browser.prefetch.settings.PreloadPagesSettingsFragment;
 import org.chromium.chrome.browser.privacy.secure_dns.SecureDnsSettings;
 import org.chromium.chrome.browser.privacy_review.PrivacyReviewDialog;
-import org.chromium.chrome.browser.privacy_sandbox.PrivacySandboxReferrer;
-import org.chromium.chrome.browser.privacy_sandbox.PrivacySandboxSettingsFragment;
 import org.chromium.chrome.browser.privacy_sandbox.PrivacySandboxSettingsFragmentV3;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.settings.ChromeManagedPreferenceDelegate;
@@ -73,7 +71,6 @@ public class PrivacySettings
     private static final String PREF_SECURE_DNS = "secure_dns";
     private static final String PREF_DO_NOT_TRACK = "do_not_track";
     private static final String PREF_CLEAR_BROWSING_DATA = "clear_browsing_data";
-    private static final String PREF_PRIVACY_SANDBOX = "privacy_sandbox";
     private static final String PREF_PRIVACY_REVIEW = "privacy_review";
     private static final String PREF_INCOGNITO_LOCK = "incognito_lock";
     private static final String PREF_PHONE_AS_A_SECURITY_KEY = "phone_as_a_security_key";
@@ -103,15 +100,6 @@ public class PrivacySettings
         SettingsUtils.addPreferencesFromResource(this, R.xml.privacy_preferences);
         getActivity().setTitle(R.string.prefs_privacy_security);
 
-        Preference sandboxPreference = findPreference(PREF_PRIVACY_SANDBOX);
-        sandboxPreference.setSummary(PrivacySandboxSettingsFragment.getStatusString(getContext()));
-        // Overwrite the click listener to pass a correct referrer to the fragment.
-        sandboxPreference.setOnPreferenceClickListener(preference -> {
-            PrivacySandboxSettingsFragmentV3.launchPrivacySandboxSettings(getContext(),
-                    new SettingsLauncherImpl(), PrivacySandboxReferrer.PRIVACY_SETTINGS);
-            return true;
-        });
-
         Preference privacyReviewPreference = findPreference(PREF_PRIVACY_REVIEW);
         if (!ChromeFeatureList.isEnabled(ChromeFeatureList.PRIVACY_REVIEW)) {
             getPreferenceScreen().removePreference(privacyReviewPreference);
@@ -283,12 +271,6 @@ public class PrivacySettings
             secureDnsPref.setSummary(SecureDnsSettings.getSummary(getContext()));
         }
 
-        Preference privacySandboxPreference = findPreference(PREF_PRIVACY_SANDBOX);
-        if (privacySandboxPreference != null) {
-            privacySandboxPreference.setSummary(
-                    PrivacySandboxSettingsFragment.getStatusString(getContext()));
-        }
-
         mIncognitoLockSettings.updateIncognitoReauthPreferenceIfNeeded(getActivity());
     }
 
diff --git a/chrome/browser/chrome_content_browser_client.cc b/chrome/browser/chrome_content_browser_client.cc
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -2817,6 +2817,10 @@ bool ChromeContentBrowserClient::IsConversionMeasurementOperationAllowed(
     const url::Origin* impression_origin,
     const url::Origin* conversion_origin,
     const url::Origin* reporting_origin) {
+  // redundant code, privacy sandbox is already disabled in the prefs
+  // but I leave it anyway for now
+  if ((true))
+    return false;
   Profile* profile = Profile::FromBrowserContext(browser_context);
 
   PrivacySandboxSettings* privacy_sandbox_settings =
diff --git a/chrome/browser/privacy_sandbox/generated_floc_pref.cc b/chrome/browser/privacy_sandbox/generated_floc_pref.cc
--- a/chrome/browser/privacy_sandbox/generated_floc_pref.cc
+++ b/chrome/browser/privacy_sandbox/generated_floc_pref.cc
@@ -35,7 +35,7 @@ extensions::settings_private::SetPrefResult GeneratedFlocPref::SetPref(
     return extensions::settings_private::SetPrefResult::PREF_NOT_MODIFIABLE;
 
   profile_->GetPrefs()->SetBoolean(prefs::kPrivacySandboxFlocEnabled,
-                                   value->GetBool());
+                                   false);
 
   return extensions::settings_private::SetPrefResult::SUCCESS;
 }
diff --git a/components/history/core/browser/history_backend.cc b/components/history/core/browser/history_backend.cc
--- a/components/history/core/browser/history_backend.cc
+++ b/components/history/core/browser/history_backend.cc
@@ -486,18 +486,7 @@ void HistoryBackend::SetBrowsingTopicsAllowed(ContextID context_id,
   if (!visit_id)
     return;
 
-  // Only add to the annotations table if the visit_id exists in the visits
-  // table.
-  VisitContentAnnotations annotations;
-  if (db_->GetContentAnnotationsForVisit(visit_id, &annotations)) {
-    annotations.annotation_flags |=
-        VisitContentAnnotationFlag::kBrowsingTopicsEligible;
-    db_->UpdateContentAnnotationsForVisit(visit_id, annotations);
-  } else {
-    annotations.annotation_flags |=
-        VisitContentAnnotationFlag::kBrowsingTopicsEligible;
-    db_->AddContentAnnotationsForVisit(visit_id, annotations);
-  }
+  // we don't want anyone to mark history as floc enabled
   ScheduleCommit();
 }
 
diff --git a/components/history/core/browser/history_service.cc b/components/history/core/browser/history_service.cc
--- a/components/history/core/browser/history_service.cc
+++ b/components/history/core/browser/history_service.cc
@@ -392,7 +392,7 @@ void HistoryService::AddPage(const GURL& url,
   AddPage(HistoryAddPageArgs(
       url, time, context_id, nav_entry_id, referrer, redirects, transition,
       !ui::PageTransitionIsMainFrame(transition), visit_source,
-      did_replace_entry, /*consider_for_ntp_most_visited=*/true, floc_allowed));
+      did_replace_entry, /*consider_for_ntp_most_visited=*/true, /*floc_allowed*/false));
 }
 
 void HistoryService::AddPage(const GURL& url,
@@ -470,14 +470,9 @@ void HistoryService::UpdateWithPageEndTime(ContextID context_id,
 }
 
 void HistoryService::SetBrowsingTopicsAllowed(ContextID context_id,
-                                              int nav_entry_id,
-                                              const GURL& url) {
-  TRACE_EVENT0("browser", "HistoryService::SetBrowsingTopicsAllowed");
-  DCHECK(backend_task_runner_) << "History service being called after cleanup";
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  ScheduleTask(PRIORITY_NORMAL,
-               base::BindOnce(&HistoryBackend::SetBrowsingTopicsAllowed,
-                              history_backend_, context_id, nav_entry_id, url));
+                                    int nav_entry_id,
+                                    const GURL& url) {
+  // we don't want anyone to mark history as floc enabled
 }
 
 void HistoryService::AddContentModelAnnotationsForVisit(
diff --git a/components/history/core/browser/url_row.h b/components/history/core/browser/url_row.h
--- a/components/history/core/browser/url_row.h
+++ b/components/history/core/browser/url_row.h
@@ -171,7 +171,6 @@ enum VisitContentAnnotationFlag : uint64_t {
   // (https://tools.ietf.org/html/rfc1918).
   // 2. The browsing-topics Permissions Policy feature is allowed in the page.
   // 3. Page opted in: document.browsingTopics() API is used in the page.
-  kBrowsingTopicsEligible = 1ULL << 1,
 };
 
 using VisitContentAnnotationFlags = uint64_t;
diff --git a/components/privacy_sandbox/privacy_sandbox_prefs.cc b/components/privacy_sandbox/privacy_sandbox_prefs.cc
--- a/components/privacy_sandbox/privacy_sandbox_prefs.cc
+++ b/components/privacy_sandbox/privacy_sandbox_prefs.cc
@@ -48,7 +48,7 @@ namespace privacy_sandbox {
 
 void RegisterProfilePrefs(PrefRegistrySimple* registry) {
   registry->RegisterBooleanPref(
-      prefs::kPrivacySandboxApisEnabled, true,
+      prefs::kPrivacySandboxApisEnabled, false,
       user_prefs::PrefRegistrySyncable::SYNCABLE_PREF);
   registry->RegisterBooleanPref(prefs::kPrivacySandboxApisEnabledV2, false);
   registry->RegisterBooleanPref(
@@ -60,7 +60,7 @@ void RegisterProfilePrefs(PrefRegistrySimple* registry) {
   registry->RegisterTimePref(prefs::kPrivacySandboxFlocDataAccessibleSince,
                              base::Time());
   registry->RegisterBooleanPref(
-      prefs::kPrivacySandboxFlocEnabled, true,
+      prefs::kPrivacySandboxFlocEnabled, false,
       user_prefs::PrefRegistrySyncable::SYNCABLE_PREF);
   registry->RegisterDictionaryPref(prefs::kPrivacySandboxFledgeJoinBlocked);
   registry->RegisterBooleanPref(prefs::kPrivacySandboxNoticeDisplayed, false);
diff --git a/components/privacy_sandbox/privacy_sandbox_settings.cc b/components/privacy_sandbox/privacy_sandbox_settings.cc
--- a/components/privacy_sandbox/privacy_sandbox_settings.cc
+++ b/components/privacy_sandbox/privacy_sandbox_settings.cc
@@ -104,8 +104,7 @@ PrivacySandboxSettings::PrivacySandboxSettings(
 PrivacySandboxSettings::~PrivacySandboxSettings() = default;
 
 bool PrivacySandboxSettings::IsFlocAllowed() const {
-  return pref_service_->GetBoolean(prefs::kPrivacySandboxFlocEnabled) &&
-         IsPrivacySandboxEnabled();
+  return false;
 }
 
 bool PrivacySandboxSettings::IsFlocAllowedForContext(
@@ -128,11 +127,8 @@ base::Time PrivacySandboxSettings::FlocDataAccessibleSince() const {
 
 void PrivacySandboxSettings::SetFlocDataAccessibleFromNow(
     bool reset_calculate_timer) const {
-  pref_service_->SetTime(prefs::kPrivacySandboxFlocDataAccessibleSince,
-                         base::Time::Now());
-
-  for (auto& observer : observers_)
-    observer.OnFlocDataAccessibleSinceUpdated(reset_calculate_timer);
+  // don't tell anyone, thanks.
+  pref_service_->ClearPref(prefs::kPrivacySandboxFlocDataAccessibleSince);
 }
 
 bool PrivacySandboxSettings::IsConversionMeasurementAllowed(
@@ -262,6 +258,8 @@ bool PrivacySandboxSettings::IsFledgeJoiningAllowed(
 bool PrivacySandboxSettings::IsFledgeAllowed(
     const url::Origin& top_frame_origin,
     const url::Origin& auction_party) {
+  if ((true))
+    return false;
   // If the sandbox is disabled, then FLEDGE is never allowed.
   if (!IsPrivacySandboxEnabled())
     return false;
@@ -301,11 +299,11 @@ bool PrivacySandboxSettings::IsPrivacySandboxEnabled() const {
     return pref_service_->GetBoolean(prefs::kPrivacySandboxApisEnabledV2);
   }
 
-  return pref_service_->GetBoolean(prefs::kPrivacySandboxApisEnabled);
+  return false;
 }
 
 void PrivacySandboxSettings::SetPrivacySandboxEnabled(bool enabled) {
-  pref_service_->SetBoolean(prefs::kPrivacySandboxManuallyControlled, true);
+  enabled = false;
 
   // Only apply the decision to the appropriate preference. Confirmation logic
   // DCHECKS that the user has not been able to enable the V2 preference
@@ -352,6 +350,10 @@ bool PrivacySandboxSettings::IsPrivacySandboxEnabledForContext(
     const GURL& url,
     const absl::optional<url::Origin>& top_frame_origin,
     const ContentSettingsForOneType& cookie_settings) const {
+  // even if prefs::kPrivacySandboxApisEnabled and
+  // prefs::kPrivacySandboxFlocEnabled are always false
+  if ((true))
+    return false; // guard this code path
   if (!IsPrivacySandboxEnabled())
     return false;
 
diff --git a/content/browser/interest_group/ad_auction_service_impl.cc b/content/browser/interest_group/ad_auction_service_impl.cc
--- a/content/browser/interest_group/ad_auction_service_impl.cc
+++ b/content/browser/interest_group/ad_auction_service_impl.cc
@@ -204,10 +204,7 @@ void AdAuctionServiceImpl::CreateMojoService(
 
 void AdAuctionServiceImpl::JoinInterestGroup(
     const blink::InterestGroup& group) {
-  // If the interest group API is not allowed for this context by Permissions
-  // Policy, do nothing
-  if (!render_frame_host()->IsFeatureEnabled(
-          blink::mojom::PermissionsPolicyFeature::kJoinAdInterestGroup)) {
+  if ((true)) {
     mojo::ReportBadMessage("Unexpected request");
     return;
   }
@@ -236,8 +233,7 @@ void AdAuctionServiceImpl::LeaveInterestGroup(const url::Origin& owner,
                                               const std::string& name) {
   // If the interest group API is not allowed for this context by Permissions
   // Policy, do nothing
-  if (!render_frame_host()->IsFeatureEnabled(
-          blink::mojom::PermissionsPolicyFeature::kJoinAdInterestGroup)) {
+  if ((true)) {
     mojo::ReportBadMessage("Unexpected request");
     return;
   }
@@ -259,8 +255,7 @@ void AdAuctionServiceImpl::LeaveInterestGroup(const url::Origin& owner,
 void AdAuctionServiceImpl::UpdateAdInterestGroups() {
   // If the interest group API is not allowed for this context by Permissions
   // Policy, do nothing
-  if (!render_frame_host()->IsFeatureEnabled(
-          blink::mojom::PermissionsPolicyFeature::kJoinAdInterestGroup)) {
+  if ((true)) {
     mojo::ReportBadMessage("Unexpected request");
     return;
   }
diff --git a/third_party/blink/common/features.cc b/third_party/blink/common/features.cc
--- a/third_party/blink/common/features.cc
+++ b/third_party/blink/common/features.cc
@@ -918,14 +918,14 @@ const base::Feature kTargetBlankImpliesNoOpener{
 // Controls how max frame rates are enforced in MediaStreamTracks.
 // TODO(crbug.com/1152307): Remove in M91.
 const base::Feature kMediaStreamTrackUseConfigMaxFrameRate{
-    "MediaStreamTrackUseConfigMaxFrameRate", base::FEATURE_DISABLED_BY_DEFAULT};
+    "MediaStreamTrackUseConfigMaxFrameRate", base::FEATURE_DISABLED_BY_DEFAULT}; // guard this
 
 // When enabled, the SubresourceFilter receives calls from the ResourceLoader
 // to perform additional checks against any aliases found from DNS CNAME records
 // for the requested URL.
 const base::Feature kSendCnameAliasesToSubresourceFilterFromRenderer{
     "SendCnameAliasesToSubresourceFilterFromRenderer",
-    base::FEATURE_DISABLED_BY_DEFAULT};
+    base::FEATURE_DISABLED_BY_DEFAULT}; // guard this
 
 const base::Feature kDisableDocumentDomainByDefault{
     "DisableDocumentDomainByDefault", base::FEATURE_DISABLED_BY_DEFAULT};
@@ -990,7 +990,7 @@ const base::FeatureParam<int> kInterestGroupStorageMaxOpsBeforeMaintenance{
 // Enable the availability of the ad interest group API as part of the
 // origin trial for FLEDGE or PARAKEET.
 const base::Feature kAdInterestGroupAPI{"AdInterestGroupAPI",
-                                        base::FEATURE_DISABLED_BY_DEFAULT};
+                                        base::FEATURE_DISABLED_BY_DEFAULT}; // bromite: guard this code
 
 // Feature flag to enable PARAKEET implementation (See
 // https://github.com/WICG/privacy-preserving-ads/blob/main/Parakeet.md).
diff --git a/third_party/blink/public/mojom/permissions_policy/permissions_policy_feature.mojom b/third_party/blink/public/mojom/permissions_policy/permissions_policy_feature.mojom
--- a/third_party/blink/public/mojom/permissions_policy/permissions_policy_feature.mojom
+++ b/third_party/blink/public/mojom/permissions_policy/permissions_policy_feature.mojom
@@ -125,9 +125,6 @@ enum PermissionsPolicyFeature {
   // Controls access to screen capture via getDisplayMedia().
   kDisplayCapture = 81,
 
-  // [Deprecated]
-  // kInterestCohort = 82,
-
   // Controls whether Autofill may fill fields in that frame when triggered on
   // a field with the main frame's origin.
   kSharedAutofill = 83,
@@ -171,12 +168,6 @@ enum PermissionsPolicyFeature {
   // for the API.
   kRunAdAuction = 91,
 
-  // Controls FLEDGE's joinAdInterestGroup and updateAdInterestGroups APIs.
-  //
-  // See https://github.com/WICG/turtledove/blob/main/FLEDGE.md#11-joining-interest-groups
-  // for the API.
-  kJoinAdInterestGroup = 92,
-
   // Client Hint for the full version for each brand.
   kClientHintUAFullVersionList = 93,
 
diff --git a/third_party/blink/renderer/core/dom/document.cc b/third_party/blink/renderer/core/dom/document.cc
--- a/third_party/blink/renderer/core/dom/document.cc
+++ b/third_party/blink/renderer/core/dom/document.cc
@@ -5939,7 +5939,6 @@ ScriptPromise Document::requestStorageAccess(ScriptState* script_state) {
                 }
               },
               WrapPersistent(resolver), WrapPersistent(this)));
-
   return promise;
 }
 
diff --git a/third_party/blink/renderer/core/permissions_policy/permissions_policy_features.json5 b/third_party/blink/renderer/core/permissions_policy/permissions_policy_features.json5
--- a/third_party/blink/renderer/core/permissions_policy/permissions_policy_features.json5
+++ b/third_party/blink/renderer/core/permissions_policy/permissions_policy_features.json5
@@ -254,15 +254,6 @@
       permissions_policy_name: "idle-detection",
       depends_on: ["IdleDetection"],
     },
-    {
-      name: "JoinAdInterestGroup",
-      permissions_policy_name: "join-ad-interest-group",
-      feature_default: "EnableForAll",
-      depends_on: ["AdInterestGroupAPI"],
-      default_value_behind_flag: [
-        ["AdInterestGroupAPIRestrictedPolicyByDefault", "EnableForSelf"],
-      ],
-    },
     {
       name: "KeyboardMap",
       permissions_policy_name: "keyboard-map",
diff --git a/third_party/blink/renderer/modules/ad_auction/navigator_auction.cc b/third_party/blink/renderer/modules/ad_auction/navigator_auction.cc
--- a/third_party/blink/renderer/modules/ad_auction/navigator_auction.cc
+++ b/third_party/blink/renderer/modules/ad_auction/navigator_auction.cc
@@ -844,9 +844,7 @@ void NavigatorAuction::joinAdInterestGroup(ScriptState* script_state,
                                            const AuctionAdInterestGroup* group,
                                            double duration_seconds,
                                            ExceptionState& exception_state) {
-  const ExecutionContext* context = ExecutionContext::From(script_state);
-  if (!context->IsFeatureEnabled(
-          blink::mojom::PermissionsPolicyFeature::kJoinAdInterestGroup)) {
+  if ((true)) {
     exception_state.ThrowDOMException(
         DOMExceptionCode::kNotAllowedError,
         "Feature join-ad-interest-group is not enabled by Permissions Policy");
@@ -883,9 +881,7 @@ void NavigatorAuction::leaveAdInterestGroup(ScriptState* script_state,
                                             Navigator& navigator,
                                             const AuctionAdInterestGroup* group,
                                             ExceptionState& exception_state) {
-  ExecutionContext* context = ExecutionContext::From(script_state);
-  if (!context->IsFeatureEnabled(
-          blink::mojom::PermissionsPolicyFeature::kJoinAdInterestGroup)) {
+  if ((true)) {
     exception_state.ThrowDOMException(
         DOMExceptionCode::kNotAllowedError,
         "Feature join-ad-interest-group is not enabled by Permissions Policy");
@@ -911,8 +907,7 @@ void NavigatorAuction::updateAdInterestGroups(ScriptState* script_state,
                                               Navigator& navigator,
                                               ExceptionState& exception_state) {
   ExecutionContext* context = ExecutionContext::From(script_state);
-  if (!context->IsFeatureEnabled(
-          blink::mojom::PermissionsPolicyFeature::kJoinAdInterestGroup)) {
+  if ((true)) {
     exception_state.ThrowDOMException(
         DOMExceptionCode::kNotAllowedError,
         "Feature join-ad-interest-group is not enabled by Permissions Policy");
diff --git a/third_party/blink/renderer/platform/runtime_enabled_features.json5 b/third_party/blink/renderer/platform/runtime_enabled_features.json5
--- a/third_party/blink/renderer/platform/runtime_enabled_features.json5
+++ b/third_party/blink/renderer/platform/runtime_enabled_features.json5
@@ -163,8 +163,7 @@
     },
     {
       name: "AdInterestGroupAPI",
-      origin_trial_feature_name: "AdInterestGroupAPI",
-      implied_by: ["Fledge", "Parakeet"],
+      depends_on: ["DisabledForBromite"],
     },
     {
       name: "AdInterestGroupAPIRestrictedPolicyByDefault",
--
2.25.1
